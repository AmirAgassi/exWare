#pragma once

#include "pch.h"
#include <iostream>
#include <string>
#include <sstream>
#include <string>
#include <vector>
#include <algorithm>
#include <functional>
#include <iterator>
#include <string.h>
#include <assert.h>

#include "retcheck.h"
#include "luac.h"
using namespace std;
#define _CRT_SECURE_NO_DEPRICATE
#define _CRT_SECURE_NO_WARNINGS

#include <Windows.h>
#define _DWORD DWORD

#define aslr(x)(x - 0x400000 + (DWORD)GetModuleHandleA(0))

// Louka's old (modified) memory namespace. Thank you
namespace memory
{
    bool Compare(const char* pData, const char* bMask, const char* szMask)
    {
        while (*szMask) {
            if (*szMask != '?') {
                if (*pData != *bMask) return 0;
            }
            ++szMask, ++pData, ++bMask;
        }
        return 1;
    }
    DWORD Scan(const char* vftable)
    {
        MEMORY_BASIC_INFORMATION MBI = { 0 };
        SYSTEM_INFO SI = { 0 };
        GetSystemInfo(&SI);
        DWORD Start = (DWORD)SI.lpMinimumApplicationAddress;
        DWORD End = (DWORD)SI.lpMaximumApplicationAddress;
        do
        {
            while (VirtualQuery((void*)Start, &MBI, sizeof(MBI))) {
                if ((MBI.Protect & PAGE_READWRITE) && !(MBI.Protect & PAGE_GUARD))
                {
                    for (DWORD i = (DWORD)(MBI.BaseAddress); i - (DWORD)(MBI.BaseAddress) < MBI.RegionSize; ++i)
                    {
                        if (Compare((const char*)i, vftable, "xxxx"))
                            return i;
                    }
                }
                Start += MBI.RegionSize;
            }
        } while (Start < End);
        return 0;
    }
}




void Console(const char* N) {

    AllocConsole();
    SetConsoleTitleA(N);
    freopen("CONOUT$", "w", stdout);
    freopen("CONIN$", "r", stdin);

    HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
    SetConsoleTextAttribute(hConsole, 12);


}


int getstate(DWORD ScriptContext) {
    return *(DWORD*)(ScriptContext + 180) ^ (ScriptContext + 180);
}




string int2hex(int addr) {
    std::stringstream stream;
    stream << std::hex << std::uppercase << addr;
    std::string result(stream.str());
    return result;
}

void printTop(int state) {
    cout << "lua_state stack top: " << pseudogettop(state) << endl;
}


/* WARNING: This file was automatically generated by lua2c. */

#ifdef __cplusplus
extern "C" {
#endif
#include <lua.h>
#include <lauxlib.h>
#include <lualib.h>
#ifdef __cplusplus
}
#endif
#include <stdio.h>
#include <stdlib.h>


#include <string.h>


#include <assert.h>

/* pushes new closure table onto the stack, using closure table at
 * given index as its parent */
static void lc_newclosuretable(lua_State* L, int idx) {

    lua_newtable(L);
    lua_pushvalue(L, idx);
    lua_rawseti(L, -2, 0);


}

/* gets upvalue with ID varid by consulting upvalue table at index
 * tidx for the upvalue table at given nesting level. */
static void lc_getupvalue(lua_State* L, int tidx, int level, int varid) {
    if (level == 0) {
        lua_rawgeti(L, tidx, varid);
    }
    else {
        lua_pushvalue(L, tidx);
        while (--level >= 0) {
            lua_rawgeti(L, tidx, 0); /* 0 links to parent table */
            lua_remove(L, -2);
            tidx = -1;
        }
        lua_rawgeti(L, -1, varid);
        lua_remove(L, -2);
    }
}


/* __mul metamethod handler.
 * warning: assumes indices in range LUA_REGISTRYINDEX < x < 0 are relative. */
static void lc_mul(lua_State* L, int idxa, int idxb) {
    if (lua_isnumber(L, idxa) && lua_isnumber(L, idxb)) {
        lua_pushnumber(L, lua_tonumber(L, idxa) * lua_tonumber(L, idxb));
    }
    else {
        if (luaL_getmetafield(L, idxa, "__mul") || luaL_getmetafield(L, idxb, "__mul")) {
            lua_pushvalue(L, idxa < 0 && idxa > LUA_REGISTRYINDEX ? idxa - 1 : idxa);
            lua_pushvalue(L, idxb < 0 && idxb > LUA_REGISTRYINDEX ? idxb - 2 : idxb);
            lua_call(L, 2, 1);
        }
        else {
            luaL_error(L, "attempt to perform arithmetic");
        }
    }
}


/* function() */
static int lcf8(lua_State* L) {
    enum { lc_nformalargs = 0 };
    lua_settop(L, 0);

    /* local target = Players[PlayerName.Text] */
    lc_getupvalue(L, lua_upvalueindex(1), 0, 5);
    lc_getupvalue(L, lua_upvalueindex(1), 1, 4);
    lua_pushliteral(L, "Text");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_gettable(L, -2);
    lua_remove(L, -2);
    assert(lua_gettop(L) == 1);

    /* repeat */
    enum { lc6 = 1 };
    while (1) {

        /* wait() */
        lua_getfield(L, LUA_ENVIRONINDEX, "wait");
        lua_call(L, 0, 0);
        assert(lua_gettop(L) == 1);

        /* target:Move(Vector3.new(math.huge*0)) */
        lua_pushvalue(L, 1);
        const int lc7 = lua_gettop(L);
        lua_pushliteral(L, "Move");
        lua_gettable(L, -2);
        lua_insert(L, -2);
        lua_getfield(L, LUA_ENVIRONINDEX, "Vector3");
        lua_pushliteral(L, "new");
        lua_gettable(L, -2);
        lua_remove(L, -2);
        lua_getfield(L, LUA_ENVIRONINDEX, "math");
        lua_pushliteral(L, "huge");
        lua_gettable(L, -2);
        lua_remove(L, -2);
        lua_pushnumber(L, 0);
        lc_mul(L, -2, -1);
        lua_remove(L, -2);
        lua_remove(L, -2);
        lua_call(L, 1, LUA_MULTRET);
        lua_call(L, (lua_gettop(L) - lc7), 0);
        assert(lua_gettop(L) == 1);
        lua_pushvalue(L, 1);
        lua_pushliteral(L, "FindFirstChild");
        lua_gettable(L, -2);
        lua_insert(L, -2);
        lua_pushliteral(L, "Head");
        lua_call(L, 2, 1);
        lua_pushboolean(L, !(lua_toboolean(L, -1)));
        lua_remove(L, -2);
        if (lua_toboolean(L, -1)) {
            break;
        }

        /* internal: stack cleanup on scope exit */
        lua_pop(L, 1);
    }
    lua_settop(L, lc6);
    assert(lua_gettop(L) == 1);
    return 0;
}


/* function() */
static int lcf11(lua_State* L) {
    enum { lc_nformalargs = 0 };
    lua_settop(L, 0);

    /* for i, v in next, Players:GetPlayers() do
     * internal: local f, s, var = explist */
    enum { lc9 = 0 };
    lua_getfield(L, LUA_ENVIRONINDEX, "next");
    lc_getupvalue(L, lua_upvalueindex(1), 0, 5);
    lua_pushliteral(L, "GetPlayers");
    lua_gettable(L, -2);
    lua_insert(L, -2);
    lua_call(L, 1, 1);
    while (1) {

        /* internal: local var_1, ..., var_n = f(s, var)
         *           if var_1 == nil then break end
         *           var = var_1 */
        lua_pushvalue(L, -3);
        lua_pushvalue(L, -3);
        lua_pushvalue(L, -3);
        lua_call(L, 2, 2);
        if (lua_isnil(L, -2)) {
            break;
        }
        lua_pushvalue(L, -2);
        lua_replace(L, -4);

        /* internal: local i with idx 4
         * internal: local v with idx 5 */


         /* v:Move(Vector3.new(math.huge*0)) */
        lua_pushvalue(L, 5);
        const int lc10 = lua_gettop(L);
        lua_pushliteral(L, "Move");
        lua_gettable(L, -2);
        lua_insert(L, -2);
        lua_getfield(L, LUA_ENVIRONINDEX, "Vector3");
        lua_pushliteral(L, "new");
        lua_gettable(L, -2);
        lua_remove(L, -2);
        lua_getfield(L, LUA_ENVIRONINDEX, "math");
        lua_pushliteral(L, "huge");
        lua_gettable(L, -2);
        lua_remove(L, -2);
        lua_pushnumber(L, 0);
        lc_mul(L, -2, -1);
        lua_remove(L, -2);
        lua_remove(L, -2);
        lua_call(L, 1, LUA_MULTRET);
        lua_call(L, (lua_gettop(L) - lc10), 0);
        assert(lua_gettop(L) == 5);

        /* internal: stack cleanup on scope exit */
        lua_pop(L, 2);
    }
    lua_settop(L, lc9);
    assert(lua_gettop(L) == 0);
    return 0;
}


/* function() */
static int lcf12(lua_State* L) {
    enum { lc_nformalargs = 0 };
    lua_settop(L, 0);

    /* FEPunish.Text = "N/A" */
    lua_pushliteral(L, "N/A");
    lc_getupvalue(L, lua_upvalueindex(1), 2, 3);
    lua_insert(L, -2);
    lua_pushliteral(L, "Text");
    lua_insert(L, -2);
    lua_settable(L, -3);
    lua_pop(L, 1);
    assert(lua_gettop(L) == 0);

    /* wait(10) */
    lua_getfield(L, LUA_ENVIRONINDEX, "wait");
    lua_pushnumber(L, 10);
    lua_call(L, 1, 0);
    assert(lua_gettop(L) == 0);

    /* FEPunish.Text = "FE Punish" */
    lua_pushliteral(L, "FE Punish");
    lc_getupvalue(L, lua_upvalueindex(1), 2, 3);
    lua_insert(L, -2);
    lua_pushliteral(L, "Text");
    lua_insert(L, -2);
    lua_settable(L, -3);
    lua_pop(L, 1);
    assert(lua_gettop(L) == 0);
    return 0;
}


/* function() */
static int lcf16(lua_State* L) {
    enum { lc_nformalargs = 0 };
    lua_settop(L, 0);

    /* if Frame.Visible == false then */
    enum { lc13 = 0 };
    lc_getupvalue(L, lua_upvalueindex(1), 3, 2);
    lua_pushliteral(L, "Visible");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushboolean(L, 0);
    const int lc14 = lua_equal(L, -2, -1);
    lua_pop(L, 2);
    lua_pushboolean(L, lc14);
    const int lc15 = lua_toboolean(L, -1);
    lua_pop(L, 1);
    if (lc15) {

        /* Frame.Visible = true */
        lua_pushboolean(L, 1);
        lc_getupvalue(L, lua_upvalueindex(1), 3, 2);
        lua_insert(L, -2);
        lua_pushliteral(L, "Visible");
        lua_insert(L, -2);
        lua_settable(L, -3);
        lua_pop(L, 1);
        assert(lua_gettop(L) == 0);
    }
    else {

        /* else
         * Frame.Visible = false */
        lua_pushboolean(L, 0);
        lc_getupvalue(L, lua_upvalueindex(1), 3, 2);
        lua_insert(L, -2);
        lua_pushliteral(L, "Visible");
        lua_insert(L, -2);
        lua_settable(L, -3);
        lua_pop(L, 1);
        assert(lua_gettop(L) == 0);
    }
    lua_settop(L, lc13);
    assert(lua_gettop(L) == 0);
    return 0;
}


/* function() */
static int lcf17(lua_State* L) {
    enum { lc_nformalargs = 0 };
    lua_settop(L, 0);

    /* FEGui:Destroy() */
    lc_getupvalue(L, lua_upvalueindex(1), 4, 1);
    lua_pushliteral(L, "Destroy");
    lua_gettable(L, -2);
    lua_insert(L, -2);
    lua_call(L, 1, 0);
    assert(lua_gettop(L) == 0);
    return 0;
}


/* name: (main)
 * function(...) */
static int lcf_main(lua_State* L) {
    lua_checkstack(L, 21);
    enum { lc_nformalargs = 0 };
    const int lc_nactualargs = lua_gettop(L);
    const int lc_nextra = (lc_nactualargs - lc_nformalargs);

    /* -- Start Script
     * -- Objects
     * warn("FilteringEnabled GUI is now loading... Please wait!") */
    lua_getfield(L, LUA_ENVIRONINDEX, "warn");
    lua_pushliteral(L, "FilteringEnabled GUI is now loading... Please wait!");
    lua_call(L, 1, 0);
    assert(lua_gettop(L) - lc_nextra == 0);

    /* local FEGui = Instance.new("ScreenGui") */
    lc_newclosuretable(L, lua_upvalueindex(1));
    enum { lc1 = 1 };
    assert((lua_gettop(L) == (lc1 + lc_nextra)));
    lua_getfield(L, LUA_ENVIRONINDEX, "Instance");
    lua_pushliteral(L, "new");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushliteral(L, "ScreenGui");
    lua_call(L, 1, 1);
    lua_rawseti(L, (lc1 + lc_nextra), 1);
    assert(lua_gettop(L) - lc_nextra == 1);

    /* local Open = Instance.new("TextButton") */
    lua_getfield(L, LUA_ENVIRONINDEX, "Instance");
    lua_pushliteral(L, "new");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushliteral(L, "TextButton");
    lua_call(L, 1, 1);
    assert(lua_gettop(L) - lc_nextra == 2);

    /* local Frame = Instance.new("Frame") */
    lc_newclosuretable(L, (lc1 + lc_nextra));
    enum { lc2 = 3 };
    assert((lua_gettop(L) == (lc2 + lc_nextra)));
    lua_getfield(L, LUA_ENVIRONINDEX, "Instance");
    lua_pushliteral(L, "new");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushliteral(L, "Frame");
    lua_call(L, 1, 1);
    lua_rawseti(L, (lc2 + lc_nextra), 2);
    assert(lua_gettop(L) - lc_nextra == 3);

    /* local Title = Instance.new("TextLabel") */
    lua_getfield(L, LUA_ENVIRONINDEX, "Instance");
    lua_pushliteral(L, "new");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushliteral(L, "TextLabel");
    lua_call(L, 1, 1);
    assert(lua_gettop(L) - lc_nextra == 4);

    /* local FEKill = Instance.new("TextButton") */
    lua_getfield(L, LUA_ENVIRONINDEX, "Instance");
    lua_pushliteral(L, "new");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushliteral(L, "TextButton");
    lua_call(L, 1, 1);
    assert(lua_gettop(L) - lc_nextra == 5);

    /* local FEKillAll = Instance.new("TextButton") */
    lua_getfield(L, LUA_ENVIRONINDEX, "Instance");
    lua_pushliteral(L, "new");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushliteral(L, "TextButton");
    lua_call(L, 1, 1);
    assert(lua_gettop(L) - lc_nextra == 6);

    /* local FEPunish = Instance.new("TextButton") */
    lc_newclosuretable(L, (lc2 + lc_nextra));
    enum { lc3 = 7 };
    assert((lua_gettop(L) == (lc3 + lc_nextra)));
    lua_getfield(L, LUA_ENVIRONINDEX, "Instance");
    lua_pushliteral(L, "new");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushliteral(L, "TextButton");
    lua_call(L, 1, 1);
    lua_rawseti(L, (lc3 + lc_nextra), 3);
    assert(lua_gettop(L) - lc_nextra == 7);

    /* local Destroy = Instance.new("TextButton") */
    lua_getfield(L, LUA_ENVIRONINDEX, "Instance");
    lua_pushliteral(L, "new");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushliteral(L, "TextButton");
    lua_call(L, 1, 1);
    assert(lua_gettop(L) - lc_nextra == 8);

    /* local PlayerName = Instance.new("TextBox") */
    lc_newclosuretable(L, (lc3 + lc_nextra));
    enum { lc4 = 9 };
    assert((lua_gettop(L) == (lc4 + lc_nextra)));
    lua_getfield(L, LUA_ENVIRONINDEX, "Instance");
    lua_pushliteral(L, "new");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushliteral(L, "TextBox");
    lua_call(L, 1, 1);
    lua_rawseti(L, (lc4 + lc_nextra), 4);
    assert(lua_gettop(L) - lc_nextra == 9);

    /* local Players = game:GetService("Players") */
    lc_newclosuretable(L, (lc4 + lc_nextra));
    enum { lc5 = 10 };
    assert((lua_gettop(L) == (lc5 + lc_nextra)));
    lua_getfield(L, LUA_ENVIRONINDEX, "game");
    lua_pushliteral(L, "GetService");
    lua_gettable(L, -2);
    lua_insert(L, -2);
    lua_pushliteral(L, "Players");
    lua_call(L, 2, 1);
    lua_rawseti(L, (lc5 + lc_nextra), 5);
    assert(lua_gettop(L) - lc_nextra == 10);

    /* local FE = Workspace.FilteringEnabled */
    lua_getfield(L, LUA_ENVIRONINDEX, "Workspace");
    lua_pushliteral(L, "FilteringEnabled");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    assert(lua_gettop(L) - lc_nextra == 11);

    /* -- Properties
     * FEGui.Name = "FEGui" */
    lua_pushliteral(L, "FEGui");
    lc_getupvalue(L, (lc5 + lc_nextra), 4, 1);
    lua_insert(L, -2);
    lua_pushliteral(L, "Name");
    lua_insert(L, -2);
    lua_settable(L, -3);
    lua_pop(L, 1);
    assert(lua_gettop(L) - lc_nextra == 11);

    /* FEGui.Parent = game.CoreGui */
    lua_getfield(L, LUA_ENVIRONINDEX, "game");
    lua_pushliteral(L, "CoreGui");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lc_getupvalue(L, (lc5 + lc_nextra), 4, 1);
    lua_insert(L, -2);
    lua_pushliteral(L, "Parent");
    lua_insert(L, -2);
    lua_settable(L, -3);
    lua_pop(L, 1);
    assert(lua_gettop(L) - lc_nextra == 11);

    /* Open.Name = "Open" */
    lua_pushliteral(L, "Open");
    lua_pushliteral(L, "Name");
    lua_insert(L, -2);
    lua_settable(L, (2 + lc_nextra));
    assert(lua_gettop(L) - lc_nextra == 11);

    /* Open.Parent = FEGui */
    lc_getupvalue(L, (lc5 + lc_nextra), 4, 1);
    lua_pushliteral(L, "Parent");
    lua_insert(L, -2);
    lua_settable(L, (2 + lc_nextra));
    assert(lua_gettop(L) - lc_nextra == 11);

    /* Open.BackgroundColor3 = Color3.new(1, 1, 1) */
    lua_getfield(L, LUA_ENVIRONINDEX, "Color3");
    lua_pushliteral(L, "new");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushnumber(L, 1);
    lua_pushnumber(L, 1);
    lua_pushnumber(L, 1);
    lua_call(L, 3, 1);
    lua_pushliteral(L, "BackgroundColor3");
    lua_insert(L, -2);
    lua_settable(L, (2 + lc_nextra));
    assert(lua_gettop(L) - lc_nextra == 11);

    /* Open.Position = UDim2.new(0, 0, 0, 350) */
    lua_getfield(L, LUA_ENVIRONINDEX, "UDim2");
    lua_pushliteral(L, "new");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushnumber(L, 0);
    lua_pushnumber(L, 0);
    lua_pushnumber(L, 0);
    lua_pushnumber(L, 350);
    lua_call(L, 4, 1);
    lua_pushliteral(L, "Position");
    lua_insert(L, -2);
    lua_settable(L, (2 + lc_nextra));
    assert(lua_gettop(L) - lc_nextra == 11);

    /* Open.Size = UDim2.new(0, 100, 0, 25) */
    lua_getfield(L, LUA_ENVIRONINDEX, "UDim2");
    lua_pushliteral(L, "new");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushnumber(L, 0);
    lua_pushnumber(L, 100);
    lua_pushnumber(L, 0);
    lua_pushnumber(L, 25);
    lua_call(L, 4, 1);
    lua_pushliteral(L, "Size");
    lua_insert(L, -2);
    lua_settable(L, (2 + lc_nextra));
    assert(lua_gettop(L) - lc_nextra == 11);

    /* Open.Style = Enum.ButtonStyle.RobloxRoundDropdownButton */
    lua_getfield(L, LUA_ENVIRONINDEX, "Enum");
    lua_pushliteral(L, "ButtonStyle");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushliteral(L, "RobloxRoundDropdownButton");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushliteral(L, "Style");
    lua_insert(L, -2);
    lua_settable(L, (2 + lc_nextra));
    assert(lua_gettop(L) - lc_nextra == 11);

    /* Open.Font = Enum.Font.Cartoon */
    lua_getfield(L, LUA_ENVIRONINDEX, "Enum");
    lua_pushliteral(L, "Font");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushliteral(L, "Cartoon");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushliteral(L, "Font");
    lua_insert(L, -2);
    lua_settable(L, (2 + lc_nextra));
    assert(lua_gettop(L) - lc_nextra == 11);

    /* Open.FontSize = Enum.FontSize.Size18 */
    lua_getfield(L, LUA_ENVIRONINDEX, "Enum");
    lua_pushliteral(L, "FontSize");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushliteral(L, "Size18");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushliteral(L, "FontSize");
    lua_insert(L, -2);
    lua_settable(L, (2 + lc_nextra));
    assert(lua_gettop(L) - lc_nextra == 11);

    /* Open.Text = "Open/Close" */
    lua_pushliteral(L, "Open/Close");
    lua_pushliteral(L, "Text");
    lua_insert(L, -2);
    lua_settable(L, (2 + lc_nextra));
    assert(lua_gettop(L) - lc_nextra == 11);

    /* Open.TextSize = 14 */
    lua_pushnumber(L, 14);
    lua_pushliteral(L, "TextSize");
    lua_insert(L, -2);
    lua_settable(L, (2 + lc_nextra));
    assert(lua_gettop(L) - lc_nextra == 11);

    /* Destroy.Name = "Destroy" */
    lua_pushliteral(L, "Destroy");
    lua_pushliteral(L, "Name");
    lua_insert(L, -2);
    lua_settable(L, (8 + lc_nextra));
    assert(lua_gettop(L) - lc_nextra == 11);

    /* Destroy.Parent = FEGui */
    lc_getupvalue(L, (lc5 + lc_nextra), 4, 1);
    lua_pushliteral(L, "Parent");
    lua_insert(L, -2);
    lua_settable(L, (8 + lc_nextra));
    assert(lua_gettop(L) - lc_nextra == 11);

    /* Destroy.BackgroundColor3 = Color3.new(1, 1, 1) */
    lua_getfield(L, LUA_ENVIRONINDEX, "Color3");
    lua_pushliteral(L, "new");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushnumber(L, 1);
    lua_pushnumber(L, 1);
    lua_pushnumber(L, 1);
    lua_call(L, 3, 1);
    lua_pushliteral(L, "BackgroundColor3");
    lua_insert(L, -2);
    lua_settable(L, (8 + lc_nextra));
    assert(lua_gettop(L) - lc_nextra == 11);

    /* Destroy.Position = UDim2.new(0, 0, 0, 400) */
    lua_getfield(L, LUA_ENVIRONINDEX, "UDim2");
    lua_pushliteral(L, "new");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushnumber(L, 0);
    lua_pushnumber(L, 0);
    lua_pushnumber(L, 0);
    lua_pushnumber(L, 400);
    lua_call(L, 4, 1);
    lua_pushliteral(L, "Position");
    lua_insert(L, -2);
    lua_settable(L, (8 + lc_nextra));
    assert(lua_gettop(L) - lc_nextra == 11);

    /* Destroy.Size = UDim2.new(0, 100, 0, 25) */
    lua_getfield(L, LUA_ENVIRONINDEX, "UDim2");
    lua_pushliteral(L, "new");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushnumber(L, 0);
    lua_pushnumber(L, 100);
    lua_pushnumber(L, 0);
    lua_pushnumber(L, 25);
    lua_call(L, 4, 1);
    lua_pushliteral(L, "Size");
    lua_insert(L, -2);
    lua_settable(L, (8 + lc_nextra));
    assert(lua_gettop(L) - lc_nextra == 11);

    /* Destroy.Style = Enum.ButtonStyle.RobloxRoundDropdownButton */
    lua_getfield(L, LUA_ENVIRONINDEX, "Enum");
    lua_pushliteral(L, "ButtonStyle");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushliteral(L, "RobloxRoundDropdownButton");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushliteral(L, "Style");
    lua_insert(L, -2);
    lua_settable(L, (8 + lc_nextra));
    assert(lua_gettop(L) - lc_nextra == 11);

    /* Destroy.Font = Enum.Font.Cartoon */
    lua_getfield(L, LUA_ENVIRONINDEX, "Enum");
    lua_pushliteral(L, "Font");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushliteral(L, "Cartoon");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushliteral(L, "Font");
    lua_insert(L, -2);
    lua_settable(L, (8 + lc_nextra));
    assert(lua_gettop(L) - lc_nextra == 11);

    /* Destroy.FontSize = Enum.FontSize.Size18 */
    lua_getfield(L, LUA_ENVIRONINDEX, "Enum");
    lua_pushliteral(L, "FontSize");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushliteral(L, "Size18");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushliteral(L, "FontSize");
    lua_insert(L, -2);
    lua_settable(L, (8 + lc_nextra));
    assert(lua_gettop(L) - lc_nextra == 11);

    /* Destroy.Text = "Destroy" */
    lua_pushliteral(L, "Destroy");
    lua_pushliteral(L, "Text");
    lua_insert(L, -2);
    lua_settable(L, (8 + lc_nextra));
    assert(lua_gettop(L) - lc_nextra == 11);

    /* Destroy.TextSize = 14 */
    lua_pushnumber(L, 14);
    lua_pushliteral(L, "TextSize");
    lua_insert(L, -2);
    lua_settable(L, (8 + lc_nextra));
    assert(lua_gettop(L) - lc_nextra == 11);

    /* Frame.Parent = FEGui */
    lc_getupvalue(L, (lc5 + lc_nextra), 4, 1);
    lc_getupvalue(L, (lc5 + lc_nextra), 3, 2);
    lua_insert(L, -2);
    lua_pushliteral(L, "Parent");
    lua_insert(L, -2);
    lua_settable(L, -3);
    lua_pop(L, 1);
    assert(lua_gettop(L) - lc_nextra == 11);

    /* Frame.BackgroundColor3 = Color3.new(0.1, 0.1, 0.1) */
    lua_getfield(L, LUA_ENVIRONINDEX, "Color3");
    lua_pushliteral(L, "new");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushnumber(L, 0.1);
    lua_pushnumber(L, 0.1);
    lua_pushnumber(L, 0.1);
    lua_call(L, 3, 1);
    lc_getupvalue(L, (lc5 + lc_nextra), 3, 2);
    lua_insert(L, -2);
    lua_pushliteral(L, "BackgroundColor3");
    lua_insert(L, -2);
    lua_settable(L, -3);
    lua_pop(L, 1);
    assert(lua_gettop(L) - lc_nextra == 11);

    /* Frame.Position = UDim2.new(0, 400, 0, 200) */
    lua_getfield(L, LUA_ENVIRONINDEX, "UDim2");
    lua_pushliteral(L, "new");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushnumber(L, 0);
    lua_pushnumber(L, 400);
    lua_pushnumber(L, 0);
    lua_pushnumber(L, 200);
    lua_call(L, 4, 1);
    lc_getupvalue(L, (lc5 + lc_nextra), 3, 2);
    lua_insert(L, -2);
    lua_pushliteral(L, "Position");
    lua_insert(L, -2);
    lua_settable(L, -3);
    lua_pop(L, 1);
    assert(lua_gettop(L) - lc_nextra == 11);

    /* Frame.Size = UDim2.new(0, 300, 0, 200) */
    lua_getfield(L, LUA_ENVIRONINDEX, "UDim2");
    lua_pushliteral(L, "new");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushnumber(L, 0);
    lua_pushnumber(L, 300);
    lua_pushnumber(L, 0);
    lua_pushnumber(L, 200);
    lua_call(L, 4, 1);
    lc_getupvalue(L, (lc5 + lc_nextra), 3, 2);
    lua_insert(L, -2);
    lua_pushliteral(L, "Size");
    lua_insert(L, -2);
    lua_settable(L, -3);
    lua_pop(L, 1);
    assert(lua_gettop(L) - lc_nextra == 11);

    /* Frame.Visible = false */
    lua_pushboolean(L, 0);
    lc_getupvalue(L, (lc5 + lc_nextra), 3, 2);
    lua_insert(L, -2);
    lua_pushliteral(L, "Visible");
    lua_insert(L, -2);
    lua_settable(L, -3);
    lua_pop(L, 1);
    assert(lua_gettop(L) - lc_nextra == 11);

    /* Frame.Draggable = true */
    lua_pushboolean(L, 1);
    lc_getupvalue(L, (lc5 + lc_nextra), 3, 2);
    lua_insert(L, -2);
    lua_pushliteral(L, "Draggable");
    lua_insert(L, -2);
    lua_settable(L, -3);
    lua_pop(L, 1);
    assert(lua_gettop(L) - lc_nextra == 11);

    /* Frame.Active = true */
    lua_pushboolean(L, 1);
    lc_getupvalue(L, (lc5 + lc_nextra), 3, 2);
    lua_insert(L, -2);
    lua_pushliteral(L, "Active");
    lua_insert(L, -2);
    lua_settable(L, -3);
    lua_pop(L, 1);
    assert(lua_gettop(L) - lc_nextra == 11);

    /* Title.Name = "Title" */
    lua_pushliteral(L, "Title");
    lua_pushliteral(L, "Name");
    lua_insert(L, -2);
    lua_settable(L, (4 + lc_nextra));
    assert(lua_gettop(L) - lc_nextra == 11);

    /* Title.Parent = Frame */
    lc_getupvalue(L, (lc5 + lc_nextra), 3, 2);
    lua_pushliteral(L, "Parent");
    lua_insert(L, -2);
    lua_settable(L, (4 + lc_nextra));
    assert(lua_gettop(L) - lc_nextra == 11);

    /* Title.BackgroundColor3 = Color3.new(0.25, 0.25, 0.80) */
    lua_getfield(L, LUA_ENVIRONINDEX, "Color3");
    lua_pushliteral(L, "new");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushnumber(L, 0.25);
    lua_pushnumber(L, 0.25);
    lua_pushnumber(L, 0.8);
    lua_call(L, 3, 1);
    lua_pushliteral(L, "BackgroundColor3");
    lua_insert(L, -2);
    lua_settable(L, (4 + lc_nextra));
    assert(lua_gettop(L) - lc_nextra == 11);

    /* Title.Size = UDim2.new(0, 300, 0, 30) */
    lua_getfield(L, LUA_ENVIRONINDEX, "UDim2");
    lua_pushliteral(L, "new");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushnumber(L, 0);
    lua_pushnumber(L, 300);
    lua_pushnumber(L, 0);
    lua_pushnumber(L, 30);
    lua_call(L, 4, 1);
    lua_pushliteral(L, "Size");
    lua_insert(L, -2);
    lua_settable(L, (4 + lc_nextra));
    assert(lua_gettop(L) - lc_nextra == 11);

    /* Title.Font = Enum.Font.Cartoon */
    lua_getfield(L, LUA_ENVIRONINDEX, "Enum");
    lua_pushliteral(L, "Font");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushliteral(L, "Cartoon");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushliteral(L, "Font");
    lua_insert(L, -2);
    lua_settable(L, (4 + lc_nextra));
    assert(lua_gettop(L) - lc_nextra == 11);

    /* Title.FontSize = Enum.FontSize.Size18 */
    lua_getfield(L, LUA_ENVIRONINDEX, "Enum");
    lua_pushliteral(L, "FontSize");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushliteral(L, "Size18");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushliteral(L, "FontSize");
    lua_insert(L, -2);
    lua_settable(L, (4 + lc_nextra));
    assert(lua_gettop(L) - lc_nextra == 11);

    /* Title.TextColor3 = Color3.new(1, 1, 1) */
    lua_getfield(L, LUA_ENVIRONINDEX, "Color3");
    lua_pushliteral(L, "new");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushnumber(L, 1);
    lua_pushnumber(L, 1);
    lua_pushnumber(L, 1);
    lua_call(L, 3, 1);
    lua_pushliteral(L, "TextColor3");
    lua_insert(L, -2);
    lua_settable(L, (4 + lc_nextra));
    assert(lua_gettop(L) - lc_nextra == 11);

    /* Title.Text = "FilteringEnabled GUI" */
    lua_pushliteral(L, "FilteringEnabled GUI");
    lua_pushliteral(L, "Text");
    lua_insert(L, -2);
    lua_settable(L, (4 + lc_nextra));
    assert(lua_gettop(L) - lc_nextra == 11);

    /* Title.TextSize = 14 */
    lua_pushnumber(L, 14);
    lua_pushliteral(L, "TextSize");
    lua_insert(L, -2);
    lua_settable(L, (4 + lc_nextra));
    assert(lua_gettop(L) - lc_nextra == 11);

    /* FEKill.Name = "FEKill" */
    lua_pushliteral(L, "FEKill");
    lua_pushliteral(L, "Name");
    lua_insert(L, -2);
    lua_settable(L, (5 + lc_nextra));
    assert(lua_gettop(L) - lc_nextra == 11);

    /* FEKill.Parent = Frame */
    lc_getupvalue(L, (lc5 + lc_nextra), 3, 2);
    lua_pushliteral(L, "Parent");
    lua_insert(L, -2);
    lua_settable(L, (5 + lc_nextra));
    assert(lua_gettop(L) - lc_nextra == 11);

    /* FEKill.BackgroundColor3 = Color3.new(0.25, 0.25, 0.80) */
    lua_getfield(L, LUA_ENVIRONINDEX, "Color3");
    lua_pushliteral(L, "new");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushnumber(L, 0.25);
    lua_pushnumber(L, 0.25);
    lua_pushnumber(L, 0.8);
    lua_call(L, 3, 1);
    lua_pushliteral(L, "BackgroundColor3");
    lua_insert(L, -2);
    lua_settable(L, (5 + lc_nextra));
    assert(lua_gettop(L) - lc_nextra == 11);

    /* FEKill.Position = UDim2.new(0, 25, 0, 100) */
    lua_getfield(L, LUA_ENVIRONINDEX, "UDim2");
    lua_pushliteral(L, "new");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushnumber(L, 0);
    lua_pushnumber(L, 25);
    lua_pushnumber(L, 0);
    lua_pushnumber(L, 100);
    lua_call(L, 4, 1);
    lua_pushliteral(L, "Position");
    lua_insert(L, -2);
    lua_settable(L, (5 + lc_nextra));
    assert(lua_gettop(L) - lc_nextra == 11);

    /* FEKill.Size = UDim2.new(0, 100, 0, 30) */
    lua_getfield(L, LUA_ENVIRONINDEX, "UDim2");
    lua_pushliteral(L, "new");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushnumber(L, 0);
    lua_pushnumber(L, 100);
    lua_pushnumber(L, 0);
    lua_pushnumber(L, 30);
    lua_call(L, 4, 1);
    lua_pushliteral(L, "Size");
    lua_insert(L, -2);
    lua_settable(L, (5 + lc_nextra));
    assert(lua_gettop(L) - lc_nextra == 11);

    /* FEKill.Font = Enum.Font.SciFi */
    lua_getfield(L, LUA_ENVIRONINDEX, "Enum");
    lua_pushliteral(L, "Font");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushliteral(L, "SciFi");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushliteral(L, "Font");
    lua_insert(L, -2);
    lua_settable(L, (5 + lc_nextra));
    assert(lua_gettop(L) - lc_nextra == 11);

    /* FEKill.FontSize = Enum.FontSize.Size18 */
    lua_getfield(L, LUA_ENVIRONINDEX, "Enum");
    lua_pushliteral(L, "FontSize");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushliteral(L, "Size18");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushliteral(L, "FontSize");
    lua_insert(L, -2);
    lua_settable(L, (5 + lc_nextra));
    assert(lua_gettop(L) - lc_nextra == 11);

    /* FEKill.Text = "FE Kill" */
    lua_pushliteral(L, "FE Kill");
    lua_pushliteral(L, "Text");
    lua_insert(L, -2);
    lua_settable(L, (5 + lc_nextra));
    assert(lua_gettop(L) - lc_nextra == 11);

    /* FEKill.TextColor3 = Color3.new(1, 1, 1) */
    lua_getfield(L, LUA_ENVIRONINDEX, "Color3");
    lua_pushliteral(L, "new");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushnumber(L, 1);
    lua_pushnumber(L, 1);
    lua_pushnumber(L, 1);
    lua_call(L, 3, 1);
    lua_pushliteral(L, "TextColor3");
    lua_insert(L, -2);
    lua_settable(L, (5 + lc_nextra));
    assert(lua_gettop(L) - lc_nextra == 11);

    /* FEKill.TextSize = 18 */
    lua_pushnumber(L, 18);
    lua_pushliteral(L, "TextSize");
    lua_insert(L, -2);
    lua_settable(L, (5 + lc_nextra));
    assert(lua_gettop(L) - lc_nextra == 11);

    /* FEKillAll.Name = "FEKillAll" */
    lua_pushliteral(L, "FEKillAll");
    lua_pushliteral(L, "Name");
    lua_insert(L, -2);
    lua_settable(L, (6 + lc_nextra));
    assert(lua_gettop(L) - lc_nextra == 11);

    /* FEKillAll.Parent = Frame */
    lc_getupvalue(L, (lc5 + lc_nextra), 3, 2);
    lua_pushliteral(L, "Parent");
    lua_insert(L, -2);
    lua_settable(L, (6 + lc_nextra));
    assert(lua_gettop(L) - lc_nextra == 11);

    /* FEKillAll.BackgroundColor3 = Color3.new(0.25, 0.25, 0.80) */
    lua_getfield(L, LUA_ENVIRONINDEX, "Color3");
    lua_pushliteral(L, "new");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushnumber(L, 0.25);
    lua_pushnumber(L, 0.25);
    lua_pushnumber(L, 0.8);
    lua_call(L, 3, 1);
    lua_pushliteral(L, "BackgroundColor3");
    lua_insert(L, -2);
    lua_settable(L, (6 + lc_nextra));
    assert(lua_gettop(L) - lc_nextra == 11);

    /* FEKillAll.Position = UDim2.new(0, 175, 0, 100) */
    lua_getfield(L, LUA_ENVIRONINDEX, "UDim2");
    lua_pushliteral(L, "new");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushnumber(L, 0);
    lua_pushnumber(L, 175);
    lua_pushnumber(L, 0);
    lua_pushnumber(L, 100);
    lua_call(L, 4, 1);
    lua_pushliteral(L, "Position");
    lua_insert(L, -2);
    lua_settable(L, (6 + lc_nextra));
    assert(lua_gettop(L) - lc_nextra == 11);

    /* FEKillAll.Size = UDim2.new(0, 100, 0, 30) */
    lua_getfield(L, LUA_ENVIRONINDEX, "UDim2");
    lua_pushliteral(L, "new");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushnumber(L, 0);
    lua_pushnumber(L, 100);
    lua_pushnumber(L, 0);
    lua_pushnumber(L, 30);
    lua_call(L, 4, 1);
    lua_pushliteral(L, "Size");
    lua_insert(L, -2);
    lua_settable(L, (6 + lc_nextra));
    assert(lua_gettop(L) - lc_nextra == 11);

    /* FEKillAll.Font = Enum.Font.SciFi */
    lua_getfield(L, LUA_ENVIRONINDEX, "Enum");
    lua_pushliteral(L, "Font");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushliteral(L, "SciFi");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushliteral(L, "Font");
    lua_insert(L, -2);
    lua_settable(L, (6 + lc_nextra));
    assert(lua_gettop(L) - lc_nextra == 11);

    /* FEKillAll.FontSize = Enum.FontSize.Size18 */
    lua_getfield(L, LUA_ENVIRONINDEX, "Enum");
    lua_pushliteral(L, "FontSize");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushliteral(L, "Size18");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushliteral(L, "FontSize");
    lua_insert(L, -2);
    lua_settable(L, (6 + lc_nextra));
    assert(lua_gettop(L) - lc_nextra == 11);

    /* FEKillAll.Text = "FE Kill All" */
    lua_pushliteral(L, "FE Kill All");
    lua_pushliteral(L, "Text");
    lua_insert(L, -2);
    lua_settable(L, (6 + lc_nextra));
    assert(lua_gettop(L) - lc_nextra == 11);

    /* FEKillAll.TextColor3 = Color3.new(1, 1, 1) */
    lua_getfield(L, LUA_ENVIRONINDEX, "Color3");
    lua_pushliteral(L, "new");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushnumber(L, 1);
    lua_pushnumber(L, 1);
    lua_pushnumber(L, 1);
    lua_call(L, 3, 1);
    lua_pushliteral(L, "TextColor3");
    lua_insert(L, -2);
    lua_settable(L, (6 + lc_nextra));
    assert(lua_gettop(L) - lc_nextra == 11);

    /* FEKillAll.TextSize = 16 */
    lua_pushnumber(L, 16);
    lua_pushliteral(L, "TextSize");
    lua_insert(L, -2);
    lua_settable(L, (6 + lc_nextra));
    assert(lua_gettop(L) - lc_nextra == 11);

    /* FEPunish.Name = "FEPunish" */
    lua_pushliteral(L, "FEPunish");
    lc_getupvalue(L, (lc5 + lc_nextra), 2, 3);
    lua_insert(L, -2);
    lua_pushliteral(L, "Name");
    lua_insert(L, -2);
    lua_settable(L, -3);
    lua_pop(L, 1);
    assert(lua_gettop(L) - lc_nextra == 11);

    /* FEPunish.Parent = Frame */
    lc_getupvalue(L, (lc5 + lc_nextra), 3, 2);
    lc_getupvalue(L, (lc5 + lc_nextra), 2, 3);
    lua_insert(L, -2);
    lua_pushliteral(L, "Parent");
    lua_insert(L, -2);
    lua_settable(L, -3);
    lua_pop(L, 1);
    assert(lua_gettop(L) - lc_nextra == 11);

    /* FEPunish.BackgroundColor3 = Color3.new(0.25, 0.25, 0.80) */
    lua_getfield(L, LUA_ENVIRONINDEX, "Color3");
    lua_pushliteral(L, "new");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushnumber(L, 0.25);
    lua_pushnumber(L, 0.25);
    lua_pushnumber(L, 0.8);
    lua_call(L, 3, 1);
    lc_getupvalue(L, (lc5 + lc_nextra), 2, 3);
    lua_insert(L, -2);
    lua_pushliteral(L, "BackgroundColor3");
    lua_insert(L, -2);
    lua_settable(L, -3);
    lua_pop(L, 1);
    assert(lua_gettop(L) - lc_nextra == 11);

    /* FEPunish.Position = UDim2.new(0, 100, 0, 150) */
    lua_getfield(L, LUA_ENVIRONINDEX, "UDim2");
    lua_pushliteral(L, "new");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushnumber(L, 0);
    lua_pushnumber(L, 100);
    lua_pushnumber(L, 0);
    lua_pushnumber(L, 150);
    lua_call(L, 4, 1);
    lc_getupvalue(L, (lc5 + lc_nextra), 2, 3);
    lua_insert(L, -2);
    lua_pushliteral(L, "Position");
    lua_insert(L, -2);
    lua_settable(L, -3);
    lua_pop(L, 1);
    assert(lua_gettop(L) - lc_nextra == 11);

    /* FEPunish.Size = UDim2.new(0, 100, 0, 30) */
    lua_getfield(L, LUA_ENVIRONINDEX, "UDim2");
    lua_pushliteral(L, "new");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushnumber(L, 0);
    lua_pushnumber(L, 100);
    lua_pushnumber(L, 0);
    lua_pushnumber(L, 30);
    lua_call(L, 4, 1);
    lc_getupvalue(L, (lc5 + lc_nextra), 2, 3);
    lua_insert(L, -2);
    lua_pushliteral(L, "Size");
    lua_insert(L, -2);
    lua_settable(L, -3);
    lua_pop(L, 1);
    assert(lua_gettop(L) - lc_nextra == 11);

    /* FEPunish.Font = Enum.Font.SciFi */
    lua_getfield(L, LUA_ENVIRONINDEX, "Enum");
    lua_pushliteral(L, "Font");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushliteral(L, "SciFi");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lc_getupvalue(L, (lc5 + lc_nextra), 2, 3);
    lua_insert(L, -2);
    lua_pushliteral(L, "Font");
    lua_insert(L, -2);
    lua_settable(L, -3);
    lua_pop(L, 1);
    assert(lua_gettop(L) - lc_nextra == 11);

    /* FEPunish.FontSize = Enum.FontSize.Size18 */
    lua_getfield(L, LUA_ENVIRONINDEX, "Enum");
    lua_pushliteral(L, "FontSize");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushliteral(L, "Size18");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lc_getupvalue(L, (lc5 + lc_nextra), 2, 3);
    lua_insert(L, -2);
    lua_pushliteral(L, "FontSize");
    lua_insert(L, -2);
    lua_settable(L, -3);
    lua_pop(L, 1);
    assert(lua_gettop(L) - lc_nextra == 11);

    /* FEPunish.Text = "FE Punish" */
    lua_pushliteral(L, "FE Punish");
    lc_getupvalue(L, (lc5 + lc_nextra), 2, 3);
    lua_insert(L, -2);
    lua_pushliteral(L, "Text");
    lua_insert(L, -2);
    lua_settable(L, -3);
    lua_pop(L, 1);
    assert(lua_gettop(L) - lc_nextra == 11);

    /* FEPunish.TextColor3 = Color3.new(1, 1, 1) */
    lua_getfield(L, LUA_ENVIRONINDEX, "Color3");
    lua_pushliteral(L, "new");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushnumber(L, 1);
    lua_pushnumber(L, 1);
    lua_pushnumber(L, 1);
    lua_call(L, 3, 1);
    lc_getupvalue(L, (lc5 + lc_nextra), 2, 3);
    lua_insert(L, -2);
    lua_pushliteral(L, "TextColor3");
    lua_insert(L, -2);
    lua_settable(L, -3);
    lua_pop(L, 1);
    assert(lua_gettop(L) - lc_nextra == 11);

    /* FEPunish.TextSize = 18 */
    lua_pushnumber(L, 18);
    lc_getupvalue(L, (lc5 + lc_nextra), 2, 3);
    lua_insert(L, -2);
    lua_pushliteral(L, "TextSize");
    lua_insert(L, -2);
    lua_settable(L, -3);
    lua_pop(L, 1);
    assert(lua_gettop(L) - lc_nextra == 11);

    /* PlayerName.Name = "PlayerName" */
    lua_pushliteral(L, "PlayerName");
    lc_getupvalue(L, (lc5 + lc_nextra), 1, 4);
    lua_insert(L, -2);
    lua_pushliteral(L, "Name");
    lua_insert(L, -2);
    lua_settable(L, -3);
    lua_pop(L, 1);
    assert(lua_gettop(L) - lc_nextra == 11);

    /* PlayerName.Parent = Frame */
    lc_getupvalue(L, (lc5 + lc_nextra), 3, 2);
    lc_getupvalue(L, (lc5 + lc_nextra), 1, 4);
    lua_insert(L, -2);
    lua_pushliteral(L, "Parent");
    lua_insert(L, -2);
    lua_settable(L, -3);
    lua_pop(L, 1);
    assert(lua_gettop(L) - lc_nextra == 11);

    /* PlayerName.BackgroundColor3 = Color3.new(0.25, 0.25, 0.80) */
    lua_getfield(L, LUA_ENVIRONINDEX, "Color3");
    lua_pushliteral(L, "new");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushnumber(L, 0.25);
    lua_pushnumber(L, 0.25);
    lua_pushnumber(L, 0.8);
    lua_call(L, 3, 1);
    lc_getupvalue(L, (lc5 + lc_nextra), 1, 4);
    lua_insert(L, -2);
    lua_pushliteral(L, "BackgroundColor3");
    lua_insert(L, -2);
    lua_settable(L, -3);
    lua_pop(L, 1);
    assert(lua_gettop(L) - lc_nextra == 11);

    /* PlayerName.Position = UDim2.new(0, 75, 0, 50) */
    lua_getfield(L, LUA_ENVIRONINDEX, "UDim2");
    lua_pushliteral(L, "new");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushnumber(L, 0);
    lua_pushnumber(L, 75);
    lua_pushnumber(L, 0);
    lua_pushnumber(L, 50);
    lua_call(L, 4, 1);
    lc_getupvalue(L, (lc5 + lc_nextra), 1, 4);
    lua_insert(L, -2);
    lua_pushliteral(L, "Position");
    lua_insert(L, -2);
    lua_settable(L, -3);
    lua_pop(L, 1);
    assert(lua_gettop(L) - lc_nextra == 11);

    /* PlayerName.Size = UDim2.new(0, 150, 0, 30) */
    lua_getfield(L, LUA_ENVIRONINDEX, "UDim2");
    lua_pushliteral(L, "new");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushnumber(L, 0);
    lua_pushnumber(L, 150);
    lua_pushnumber(L, 0);
    lua_pushnumber(L, 30);
    lua_call(L, 4, 1);
    lc_getupvalue(L, (lc5 + lc_nextra), 1, 4);
    lua_insert(L, -2);
    lua_pushliteral(L, "Size");
    lua_insert(L, -2);
    lua_settable(L, -3);
    lua_pop(L, 1);
    assert(lua_gettop(L) - lc_nextra == 11);

    /* PlayerName.Font = Enum.Font.SciFi */
    lua_getfield(L, LUA_ENVIRONINDEX, "Enum");
    lua_pushliteral(L, "Font");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushliteral(L, "SciFi");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lc_getupvalue(L, (lc5 + lc_nextra), 1, 4);
    lua_insert(L, -2);
    lua_pushliteral(L, "Font");
    lua_insert(L, -2);
    lua_settable(L, -3);
    lua_pop(L, 1);
    assert(lua_gettop(L) - lc_nextra == 11);

    /* PlayerName.FontSize = Enum.FontSize.Size18 */
    lua_getfield(L, LUA_ENVIRONINDEX, "Enum");
    lua_pushliteral(L, "FontSize");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushliteral(L, "Size18");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lc_getupvalue(L, (lc5 + lc_nextra), 1, 4);
    lua_insert(L, -2);
    lua_pushliteral(L, "FontSize");
    lua_insert(L, -2);
    lua_settable(L, -3);
    lua_pop(L, 1);
    assert(lua_gettop(L) - lc_nextra == 11);

    /* PlayerName.Text = "" */
    lua_pushliteral(L, "");
    lc_getupvalue(L, (lc5 + lc_nextra), 1, 4);
    lua_insert(L, -2);
    lua_pushliteral(L, "Text");
    lua_insert(L, -2);
    lua_settable(L, -3);
    lua_pop(L, 1);
    assert(lua_gettop(L) - lc_nextra == 11);

    /* PlayerName.TextColor3 = Color3.new(1, 1, 1) */
    lua_getfield(L, LUA_ENVIRONINDEX, "Color3");
    lua_pushliteral(L, "new");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushnumber(L, 1);
    lua_pushnumber(L, 1);
    lua_pushnumber(L, 1);
    lua_call(L, 3, 1);
    lc_getupvalue(L, (lc5 + lc_nextra), 1, 4);
    lua_insert(L, -2);
    lua_pushliteral(L, "TextColor3");
    lua_insert(L, -2);
    lua_settable(L, -3);
    lua_pop(L, 1);
    assert(lua_gettop(L) - lc_nextra == 11);

    /* PlayerName.TextSize = 18 */
    lua_pushnumber(L, 18);
    lc_getupvalue(L, (lc5 + lc_nextra), 1, 4);
    lua_insert(L, -2);
    lua_pushliteral(L, "TextSize");
    lua_insert(L, -2);
    lua_settable(L, -3);
    lua_pop(L, 1);
    assert(lua_gettop(L) - lc_nextra == 11);

    /* PlayerName.ClearTextOnFocus = false */
    lua_pushboolean(L, 0);
    lc_getupvalue(L, (lc5 + lc_nextra), 1, 4);
    lua_insert(L, -2);
    lua_pushliteral(L, "ClearTextOnFocus");
    lua_insert(L, -2);
    lua_settable(L, -3);
    lua_pop(L, 1);
    assert(lua_gettop(L) - lc_nextra == 11);

    /* FEKill.MouseButton1Down:connect(function()
     *     local target = Players[PlayerName.Text]
     *     repeat
     *     wait()
     *     target:Move(Vector3.new(math.huge*0))
     *     until not target:FindFirstChild("Head")
     * end) */
    lua_pushliteral(L, "MouseButton1Down");
    lua_gettable(L, (5 + lc_nextra));
    lua_pushliteral(L, "connect");
    lua_gettable(L, -2);
    lua_insert(L, -2);
    lua_pushvalue(L, (lc5 + lc_nextra));
    lua_pushcclosure(L, lcf8, 1);
    lua_call(L, 2, 0);
    assert(lua_gettop(L) - lc_nextra == 11);

    /* FEKillAll.MouseButton1Down:connect(function()
     *     for i, v in next, Players:GetPlayers() do
     *         v:Move(Vector3.new(math.huge*0))
     *     end
     * end) */
    lua_pushliteral(L, "MouseButton1Down");
    lua_gettable(L, (6 + lc_nextra));
    lua_pushliteral(L, "connect");
    lua_gettable(L, -2);
    lua_insert(L, -2);
    lua_pushvalue(L, (lc5 + lc_nextra));
    lua_pushcclosure(L, lcf11, 1);
    lua_call(L, 2, 0);
    assert(lua_gettop(L) - lc_nextra == 11);

    /* FEPunish.MouseButton1Down:connect(function()
     *     FEPunish.Text = "N/A"
     *     wait(10)
     *     FEPunish.Text = "FE Punish"
     * end) */
    lc_getupvalue(L, (lc5 + lc_nextra), 2, 3);
    lua_pushliteral(L, "MouseButton1Down");
    lua_gettable(L, -2);
    lua_remove(L, -2);
    lua_pushliteral(L, "connect");
    lua_gettable(L, -2);
    lua_insert(L, -2);
    lua_pushvalue(L, (lc5 + lc_nextra));
    lua_pushcclosure(L, lcf12, 1);
    lua_call(L, 2, 0);
    assert(lua_gettop(L) - lc_nextra == 11);

    /* Open.MouseButton1Click:connect(function()
     * 	if Frame.Visible == false then
     * 		Frame.Visible = true
     * 	else
     * 		Frame.Visible = false
     * 	end
     * end) */
    lua_pushliteral(L, "MouseButton1Click");
    lua_gettable(L, (2 + lc_nextra));
    lua_pushliteral(L, "connect");
    lua_gettable(L, -2);
    lua_insert(L, -2);
    lua_pushvalue(L, (lc5 + lc_nextra));
    lua_pushcclosure(L, lcf16, 1);
    lua_call(L, 2, 0);
    assert(lua_gettop(L) - lc_nextra == 11);

    /* Destroy.MouseButton1Click:connect(function()
     *     FEGui:Destroy()
     * end) */
    lua_pushliteral(L, "MouseButton1Click");
    lua_gettable(L, (8 + lc_nextra));
    lua_pushliteral(L, "connect");
    lua_gettable(L, -2);
    lua_insert(L, -2);
    lua_pushvalue(L, (lc5 + lc_nextra));
    lua_pushcclosure(L, lcf17, 1);
    lua_call(L, 2, 0);
    assert(lua_gettop(L) - lc_nextra == 11);

    /* if FE == true then */
    enum { lc18 = 11 };
    lua_pushboolean(L, 1);
    const int lc19 = lua_equal(L, (11 + lc_nextra), -1);
    lua_pop(L, 1);
    lua_pushboolean(L, lc19);
    const int lc20 = lua_toboolean(L, -1);
    lua_pop(L, 1);
    if (lc20) {

        /* Title.Text = "FilteringEnabled GUI - FE Is Enabled" */
        lua_pushliteral(L, "FilteringEnabled GUI - FE Is Enabled");
        lua_pushliteral(L, "Text");
        lua_insert(L, -2);
        lua_settable(L, (4 + lc_nextra));
        assert(lua_gettop(L) - lc_nextra == 11);
    }
    else {

        /* elseif FE == false then */
        enum { lc21 = 11 };
        lua_pushboolean(L, 0);
        const int lc22 = lua_equal(L, (11 + lc_nextra), -1);
        lua_pop(L, 1);
        lua_pushboolean(L, lc22);
        const int lc23 = lua_toboolean(L, -1);
        lua_pop(L, 1);
        if (lc23) {

            /* Title.Text = "FilteringEnabled GUI - FE Is Disabled" */
            lua_pushliteral(L, "FilteringEnabled GUI - FE Is Disabled");
            lua_pushliteral(L, "Text");
            lua_insert(L, -2);
            lua_settable(L, (4 + lc_nextra));
            assert(lua_gettop(L) - lc_nextra == 11);
        }
        lua_settop(L, (lc21 + lc_nextra));
    }
    lua_settop(L, (lc18 + lc_nextra));
    assert(lua_gettop(L) - lc_nextra == 11);
    return 0;
}


/* from lua.c */
static int traceback(lua_State* L) {
    if (!lua_isstring(L, 1))  /* 'message' not a string? */
        return 1;  /* keep it intact */
    lua_getfield(L, LUA_GLOBALSINDEX, "debug");
    if (!lua_istable(L, -1)) {
        lua_pop(L, 1);
        return 1;
    }
    lua_getfield(L, -1, "traceback");
    if (!lua_isfunction(L, -1)) {
        lua_pop(L, 2);
        return 1;
    }
    lua_pushvalue(L, 1);  /* pass error message */
    lua_pushinteger(L, 2);  /* skip this function and traceback */
    lua_call(L, 2, 1);  /* call debug.traceback */
    return 1;
}


static void lc_l_message(const char* pname, const char* msg) {
    if (pname) fprintf(stderr, "%s: ", pname);
    fprintf(stderr, "%s\n", msg);
    fflush(stderr);
}

static int lc_report(lua_State* L, int status) {
    if (status && !lua_isnil(L, -1)) {
        const char* msg = lua_tostring(L, -1);
        if (msg == NULL) msg = "(error object is not a string)";
        /*FIX-IMROVE:progname*/
        lc_l_message("lua", msg);
        lua_pop(L, 1);
    }
    return status;
}

static int lc_docall(lua_State* L, int narg, int clear) {
    int status;
    int base = lua_gettop(L) - narg;  /* function index */
    lua_pushcfunction(L, traceback);  /* push traceback function */
    lua_insert(L, base);  /* put it under chunk and args */
    /*FIX? signal(SIGINT, laction); */
    status = lua_pcall(L, narg, (clear ? 0 : LUA_MULTRET), base);
    /*FIX? signal(SIGINT, SIG_DFL); */
    lua_remove(L, base);  /* remove traceback function */
    /* force a complete garbage collection in case of errors */
    if (status != 0) lua_gc(L, LUA_GCCOLLECT, 0);
    return status;
}

static int lc_dofile(lua_State* L, const char* name) {
    int status = luaL_loadfile(L, name) || lc_docall(L, 0, 1);
    return lc_report(L, status);
}

static int lc_dostring(lua_State* L, const char* s, const char* name) {
    int status = luaL_loadbuffer(L, s, strlen(s), name) || lc_docall(L, 0, 1);
    return lc_report(L, status);
}

static int lc_handle_luainit(lua_State* L) {
    const char* init = getenv(LUA_INIT);
    if (init == NULL) return 0;  /* status OK */
    else if (init[0] == '@')
        return lc_dofile(L, init + 1);
    else
        return lc_dostring(L, init, "=" LUA_INIT);
}


typedef struct {
    int c;
    const char** v;
} lc_args_t;


/* create global arg table */
static void lc_createarg(lua_State* L, const lc_args_t* const args) {
    int i;
    lua_newtable(L);
    for (i = 0; i < args->c; i++) {
        lua_pushstring(L, args->v[i]);
        lua_rawseti(L, -2, i);
    }
    lua_setglobal(L, "arg");
}


static int lc_pmain(lua_State* L) {
    luaL_openlibs(L);

    const lc_args_t* const args = (lc_args_t*)lua_touserdata(L, 1);
    lc_createarg(L, args);

    lua_pushcfunction(L, traceback);

    const int status1 = lc_handle_luainit(L);
    if (status1 != 0) return 0;

    /* note: IMPROVE: closure not always needed here */
    lua_newtable(L); /* closure table */
    lua_pushcclosure(L, lcf_main, 1);
    int i;
    for (i = 1; i < args->c; i++) {
        lua_pushstring(L, args->v[i]);
    }
    int status2 = lua_pcall(L, args->c - 1, 0, -2);
    if (status2 != 0) {
        const char* msg = lua_tostring(L, -1);
        if (msg == NULL) msg = "(error object is not a string)";
        fputs(msg, stderr);
    }
    return 0;
}





int main() {
    Console("exWare Executor");

    cout << "exWare Early Development Build" << endl << endl << endl;

    int scriptc = aslr(0x01F88AC8);
    int state;
    DWORD scriptContext;

    cout << "Scanning for ScriptContext... ";
    scriptContext = memory::Scan((char*)&scriptc);
    cout << "Done" << endl << "Scanning for lua_state... ";

    state = getstate((DWORD)scriptContext);
    if (pseudogettop(state) == 0) {
        cout << "Done." << endl << endl;
    }
    else {
        cout << "Failed." << endl << "FATAL: ScriptContext failed to initialize, lua_state is nonexistant. The exploit will not continue. " << endl << "Top: " << pseudogettop(state) << " (should be 0)";
        return 1;
    }

    int L = state;



    lc_args_t args = { argc, argv };
    lua_State* L = luaL_newstate();
    if (!L) { fputs("Failed creating Lua state.", stderr); exit(1); }

    int status = lua_cpcall(L, lc_pmain, &args);
    if (status != 0) {
        fputs(lua_tostring(L, -1), stderr);
    }

    lua_close(L);

    return 1;








}



BOOL APIENTRY DllMain(HMODULE hModule,
    DWORD  ul_reason_for_call,
    LPVOID lpReserved
)
{
    switch (ul_reason_for_call)
    {
    case DLL_PROCESS_ATTACH:
        main();
    case DLL_THREAD_ATTACH:
    case DLL_THREAD_DETACH:
    case DLL_PROCESS_DETACH:
        break;
    }
    return TRUE;
}

